{
    "dataset_info": {
        "name": "STBTester YouTube Test Cases Dataset",
        "version": "1.0",
        "description": "Jeu de données de scénarios de test STBTester pour l'application YouTube sur Totalplay.",
        "total_records": 7,
        "categories": [
            "streaming",
            "navigation",
            "stability",
            "video_playback"
        ],
        "applications": [
            "YouTube"
        ],
        "created_date": "2025-05-29"
    },
    "test_cases": [
        {
            "id": "YT_SCENARIO_001",
            "title": "Lancer, attendre et quitter YouTube via STREAMING",
            "category": "streaming",
            "subcategory": "app_launch",
            "application": "YouTube",
            "platform": "Totalplay",
            "test_type": "functional",
            "complexity": "low",
            "estimated_duration": "40 seconds",
            "objective": "Vérifier l'ouverture et la fermeture propre de YouTube via le menu STREAMING.",
            "preconditions": "Le système Totalplay est allumé et sur Live TV.",
            "steps": [
                {"step_number": 1, "action": "Aller sur Live TV", "expected_result": "Live TV affiché", "code_equivalent": "totalplay.Menu.to_live()"},
                {"step_number": 2, "action": "Ouvrir le menu principal", "expected_result": "Menu affiché", "code_equivalent": "totalplay.Menu.to_menu()"},
                {"step_number": 3, "action": "Aller dans STREAMING et sélectionner YouTube", "expected_result": "YouTube démarre", "code_equivalent": "totalplay.select_menu_items(menu_item=\"STREAMING\"); totalplay.select_apps(name_app=\"Youtube\")"},
                {"step_number": 4, "action": "Attendre le chargement de YouTube", "expected_result": "YouTube prêt", "code_equivalent": "time.sleep(30)"},
                {"step_number": 5, "action": "Quitter YouTube proprement", "expected_result": "Retour au menu principal", "code_equivalent": "youtube.Menu().exit(exit_dirty); sc_stbt.press(\"KEY_MENU\")"}
            ],
            "code_snippet": "import time\nimport totalplay\nimport sc_stbt\nimport stbt_core as stbt\nfrom sc_stbt import youtube\n\nexit_dirty = eval(sc_stbt.get_config(\"youtube\",\"dirty_exit\"))\n\nif __name__ == '__main__':\n    totalplay.Menu.to_live()\n    totalplay.Menu.to_menu()\n    totalplay.select_menu_items(menu_item=\"STREAMING\")\n    totalplay.select_apps(name_app=\"Youtube\")\n    time.sleep(30)\n    youtube.Menu().exit(exit_dirty)\n    sc_stbt.press(\"KEY_MENU\")",
            "functions_used": [
                "totalplay.Menu.to_live()",
                "totalplay.Menu.to_menu()",
                "totalplay.select_menu_items()",
                "totalplay.select_apps()",
                "youtube.Menu().exit()",
                "sc_stbt.press()",
                "time.sleep()",
                "sc_stbt.get_config()"
            ],
            "navigation_path": "Live TV → Menu → STREAMING → YouTube → Exit",
            "tags": ["youtube", "streaming", "app_launch", "exit", "menu_navigation"],
            "patterns": ["standard_app_launch", "clean_exit"],
            "related_tests": ["YT_SCENARIO_002", "YT_SCENARIO_004"],
            "maintenance_notes": "Test basique d'ouverture/fermeture YouTube.",
            "last_updated": "2025-05-29"
        },
        {
            "id": "YT_SCENARIO_003",
            "title": "Lancer YouTube depuis STREAMING et attendre le chargement",
            "category": "streaming",
            "subcategory": "app_launch",
            "application": "YouTube",
            "platform": "Totalplay",
            "test_type": "functional",
            "complexity": "low",
            "estimated_duration": "30 seconds",
            "objective": "Vérifier l'ouverture de YouTube depuis STREAMING et attendre l'interface.",
            "preconditions": "Le système Totalplay est allumé et sur Live TV.",
            "steps": [
                {"step_number": 1, "action": "Aller sur Live TV", "expected_result": "Live TV affiché", "code_equivalent": "totalplay.Menu.to_live()"},
                {"step_number": 2, "action": "Ouvrir le menu principal", "expected_result": "Menu affiché", "code_equivalent": "totalplay.Menu.to_menu()"},
                {"step_number": 3, "action": "Aller dans STREAMING et sélectionner YouTube", "expected_result": "YouTube démarre", "code_equivalent": "totalplay.select_menu_items(menu_item=\"STREAMING\"); totalplay.select_apps(name_app=\"YouTube\")"},
                {"step_number": 4, "action": "Attendre le chargement de YouTube", "expected_result": "YouTube prêt", "code_equivalent": "time.sleep(30)"}
            ],
            "code_snippet": "import time\nimport totalplay\n\nif __name__ == '__main__':\n    totalplay.Menu.to_live()\n    totalplay.Menu.to_menu()\n    totalplay.select_menu_items(menu_item=\"STREAMING\")\n    totalplay.select_apps(name_app=\"YouTube\")\n    time.sleep(30)",
            "functions_used": [
                "totalplay.Menu.to_live()",
                "totalplay.Menu.to_menu()",
                "totalplay.select_menu_items()",
                "totalplay.select_apps()",
                "time.sleep()"
            ],
            "navigation_path": "Live TV → Menu → STREAMING → YouTube",
            "tags": ["youtube", "streaming", "app_launch", "menu_navigation"],
            "patterns": ["standard_app_launch"],
            "related_tests": ["YT_SCENARIO_001", "YT_SCENARIO_002"],
            "maintenance_notes": "Test d'ouverture simple de YouTube.",
            "last_updated": "2025-05-29"
        },
        {
            "id": "YT_SCENARIO_004",
            "title": "Endurance navigation et lecture YouTube (longue durée)",
            "category": "stability",
            "subcategory": "long_duration",
            "application": "YouTube",
            "platform": "Totalplay",
            "test_type": "endurance",
            "complexity": "high",
            "estimated_duration": "15 hours",
            "objective": "Vérifier la stabilité de navigation et lecture sur YouTube pendant une longue durée.",
            "preconditions": "Le système Totalplay est allumé et sur Live TV.",
            "steps": [
                {"step_number": 1, "action": "Aller sur Live TV", "expected_result": "Live TV affiché", "code_equivalent": "totalplay.Menu.to_live()"},
                {"step_number": 2, "action": "Ouvrir le menu principal", "expected_result": "Menu affiché", "code_equivalent": "totalplay.Menu.to_menu()"},
                {"step_number": 3, "action": "Aller dans STREAMING et sélectionner YouTube", "expected_result": "YouTube démarre", "code_equivalent": "totalplay.select_menu_items(menu_item=\"STREAMING\"); totalplay.select_apps(name_app=\"Youtube\")"},
                {"step_number": 4, "action": "Attendre le chargement de YouTube", "expected_result": "YouTube prêt", "code_equivalent": "time.sleep(10)"},
                {"step_number": 5, "action": "Passer l'écran de connexion si présent", "expected_result": "Accueil YouTube affiché", "code_equivalent": "youtube.Menu().skip_sign_in()"},
                {"step_number": 6, "action": "Naviguer dans l'interface (flèches)", "expected_result": "Navigation stable", "code_equivalent": "for _ in range(2): sc_stbt.press(\"KEY_DOWN\"); for _ in range(2): sc_stbt.press(\"KEY_RIGHT\")"},
                {"step_number": 7, "action": "Boucle de navigation et lecture pendant 15h", "expected_result": "Aucune erreur, navigation fluide", "code_equivalent": "while time.time() <= end_time: ..."},
                {"step_number": 8, "action": "Quitter YouTube proprement", "expected_result": "Retour au menu principal", "code_equivalent": "youtube.Menu().exit(exit_dirty)"}
            ],
            "code_snippet": "import time\nimport totalplay\nimport sc_stbt\nimport stbt_core as stbt\nfrom sc_stbt import youtube\n\noccurrence = 4\nexit_dirty = eval(sc_stbt.get_config(\"youtube\",\"dirty_exit\"))\nkeys = [\"KEY_DOWN\", \"KEY_RIGHT\", \"KEY_LEFT\", \"KEY_UP\"]\ntest_duration = 54000\n\nif __name__ == '__main__':\n    totalplay.Menu.to_live()\n    totalplay.Menu.to_menu()\n    totalplay.select_menu_items(menu_item=\"STREAMING\")\n    totalplay.select_apps(name_app=\"Youtube\")\n    time.sleep(10)\n    youtube.Menu().skip_sign_in()\n    start_time = time.time()\n    end_time = start_time + test_duration\n    for _ in range(2) :sc_stbt.press(\"KEY_DOWN\")\n    for _ in range(2) :sc_stbt.press(\"KEY_RIGHT\")\n    while time.time() <= end_time:\n        for key in keys:\n            for _ in range(occurrence):\n                sc_stbt.press_and_wait(key, stable_secs=0)\n                time.sleep(2)\n        for _ in range(2) :sc_stbt.press(\"KEY_RIGHT\")\n        sc_stbt.press(\"KEY_DOWN\")\n        time.sleep(2)\n        sc_stbt.press(\"KEY_OK\")\n        time.sleep(20)\n        sc_stbt.press(\"KEY_BACK\")\n    youtube.Menu().exit(exit_dirty)",
            "functions_used": [
                "totalplay.Menu.to_live()",
                "totalplay.Menu.to_menu()",
                "totalplay.select_menu_items()",
                "totalplay.select_apps()",
                "youtube.Menu().skip_sign_in()",
                "sc_stbt.press()",
                "sc_stbt.press_and_wait()",
                "time.sleep()",
                "sc_stbt.get_config()"
            ],
            "navigation_path": "Live TV → Menu → STREAMING → YouTube → Navigation/lecture longue → Exit",
            "tags": ["youtube", "stability", "endurance_test", "navigation", "long_duration"],
            "patterns": ["endurance_testing", "navigation_loop"],
            "related_tests": ["YT_SCENARIO_001", "YT_SCENARIO_005"],
            "maintenance_notes": "Test d'endurance longue durée sur YouTube.",
            "last_updated": "2025-05-29"
        },
        {
            "id": "YT_SCENARIO_005",
            "title": "Lecture vidéo YouTube avec détection d'écran noir (1h)",
            "category": "stability",
            "subcategory": "long_duration",
            "application": "YouTube",
            "platform": "Totalplay",
            "test_type": "endurance",
            "complexity": "high",
            "estimated_duration": "1 hour",
            "objective": "Vérifier la lecture continue sur YouTube et l'absence d'écran noir pendant 1 heure.",
            "preconditions": "Le système Totalplay est allumé et sur Live TV.",
            "steps": [
                {"step_number": 1, "action": "Aller sur Live TV", "expected_result": "Live TV affiché", "code_equivalent": "totalplay.Menu.to_live()"},
                {"step_number": 2, "action": "Ouvrir le menu principal", "expected_result": "Menu affiché", "code_equivalent": "totalplay.Menu.to_menu()"},
                {"step_number": 3, "action": "Aller dans STREAMING et sélectionner YouTube", "expected_result": "YouTube démarre", "code_equivalent": "totalplay.Menu().select(\"STREAMING\"); sc_stbt.press(\"KEY_UP\"); totalplay.AppsGrid().select(\"YOUTUBE\"); sc_stbt.press(\"KEY_OK\")"},
                {"step_number": 4, "action": "Attendre le chargement de YouTube", "expected_result": "YouTube prêt", "code_equivalent": "time.sleep(5)"},
                {"step_number": 5, "action": "Lecture vidéo et détection d'écran noir pendant 1h", "expected_result": "Aucun écran noir détecté, vidéo fluide", "code_equivalent": "while time.time() <= end_time: assert sc_stbt.wait_until(lambda : not sc_stbt.is_screen_black(region = stbt.Region(x=0, y=105, width=961, height=434)), timeout_secs = 120), 'Blackscreen detected'; sc_stbt.wait_for_motion(consecutive_frames=\"20/500\", timeout_secs=300)"},
                {"step_number": 6, "action": "Quitter YouTube proprement", "expected_result": "Retour au menu principal", "code_equivalent": "youtube.Menu().exit(exit_dirty)"}
            ],
            "code_snippet": "import time\nimport totalplay\nimport sc_stbt\nimport stbt_core as stbt\nfrom sc_stbt import youtube\n\nexit_dirty = eval(sc_stbt.get_config(\"youtube\",\"dirty_exit\"))\nkeys = [\"KEY_DOWN\", \"KEY_RIGHT\", \"KEY_LEFT\", \"KEY_UP\"]\ntest_duration = 3600 \n\ndef open_video():\n    \n\nif __name__ == '__main__':\n    totalplay.Menu.to_live()\n    totalplay.Menu.to_menu()\n    totalplay.Menu().select(\"STREAMING\")\n    sc_stbt.press(\"KEY_UP\")\n    time.sleep(2)\n    totalplay.AppsGrid().select(\"YOUTUBE\")\n    time.sleep(5)\n    sc_stbt.press(\"KEY_OK\")\n    start_time = time.time()\n    end_time = start_time + test_duration\n    while time.time() <= end_time:\n      assert sc_stbt.wait_until(lambda : not sc_stbt.is_screen_black(region = stbt.Region(x=0, y=105, width=961, height=434)), \n                                                    timeout_secs = 120), \"Blackscreen detected\"\n      sc_stbt.wait_for_motion(consecutive_frames=\"20/500\",\n                                timeout_secs=300)\n    youtube.Menu().exit(exit_dirty)",
            "functions_used": [
                "totalplay.Menu.to_live()",
                "totalplay.Menu.to_menu()",
                "totalplay.Menu().select()",
                "sc_stbt.press()",
                "totalplay.AppsGrid().select()",
                "sc_stbt.press_and_wait()",
                "sc_stbt.wait_until()",
                "sc_stbt.is_screen_black()",
                "sc_stbt.wait_for_motion()",
                "youtube.Menu().exit()",
                "time.sleep()",
                "sc_stbt.get_config()"
            ],
            "navigation_path": "Live TV → Menu → STREAMING → YouTube → Lecture vidéo 1h → Exit",
            "tags": ["youtube", "stability", "endurance_test", "black_screen_detection", "video_playback"],
            "patterns": ["endurance_testing", "black_screen_detection"],
            "related_tests": ["YT_SCENARIO_004", "YT_SCENARIO_006"],
            "maintenance_notes": "Test d'endurance vidéo avec détection d'écran noir.",
            "last_updated": "2025-05-29"
        },
        {
            "id": "YT_SCENARIO_006",
            "title": "Lecture vidéo YouTube avec détection d'écran noir (1h, variante)",
            "category": "stability",
            "subcategory": "long_duration",
            "application": "YouTube",
            "platform": "Totalplay",
            "test_type": "endurance",
            "complexity": "high",
            "estimated_duration": "1 hour",
            "objective": "Vérifier la lecture continue sur YouTube et l'absence d'écran noir pendant 1 heure (variante de navigation).",
            "preconditions": "Le système Totalplay est allumé et sur Live TV.",
            "steps": [
                {"step_number": 1, "action": "Aller sur Live TV", "expected_result": "Live TV affiché", "code_equivalent": "totalplay.Menu.to_live()"},
                {"step_number": 2, "action": "Ouvrir le menu principal", "expected_result": "Menu affiché", "code_equivalent": "totalplay.Menu.to_menu()"},
                {"step_number": 3, "action": "Aller dans STREAMING et sélectionner YouTube", "expected_result": "YouTube démarre", "code_equivalent": "totalplay.Menu().select(\"STREAMING\"); sc_stbt.press(\"KEY_UP\"); totalplay.AppsGrid().select(\"YOUTUBE\"); sc_stbt.press(\"KEY_OK\")"},
                {"step_number": 4, "action": "Attendre le chargement de YouTube", "expected_result": "YouTube prêt", "code_equivalent": "time.sleep(5)"},
                {"step_number": 5, "action": "Lecture vidéo et détection d'écran noir pendant 1h", "expected_result": "Aucun écran noir détecté, vidéo fluide", "code_equivalent": "while time.time() <= end_time: assert sc_stbt.wait_until(lambda : not sc_stbt.is_screen_black(region = stbt.Region(x=0, y=105, width=961, height=434)), timeout_secs = 120), 'Blackscreen detected'; sc_stbt.wait_for_motion(consecutive_frames=\"20/500\", timeout_secs=300)"},
                {"step_number": 6, "action": "Quitter YouTube proprement", "expected_result": "Retour au menu principal", "code_equivalent": "youtube.Menu().exit(exit_dirty)"}
            ],
            "code_snippet": "import time\nimport totalplay\nimport sc_stbt\nimport stbt_core as stbt\nfrom sc_stbt import youtube\n\nexit_dirty = eval(sc_stbt.get_config(\"youtube\",\"dirty_exit\"))\nkeys = [\"KEY_DOWN\", \"KEY_RIGHT\", \"KEY_LEFT\", \"KEY_UP\"]\ntest_duration = 3600 \n\ndef open_video():\n    \n\n  if __name__ == '__main__':\n      totalplay.Menu.to_live()\n      totalplay.Menu.to_menu()\n      totalplay.Menu().select(\"STREAMING\")\n      sc_stbt.press(\"KEY_UP\")\n      time.sleep(2)\n      totalplay.AppsGrid().select(\"YOUTUBE\")\n      time.sleep(5)\n      sc_stbt.press(\"KEY_OK\")\n      start_time = time.time()\n      end_time = start_time + test_duration\n      while time.time() <= end_time:\n        assert sc_stbt.wait_until(lambda : not sc_stbt.is_screen_black(region = stbt.Region(x=0, y=105, width=961, height=434)), \n                                                      timeout_secs = 120), \"Blackscreen detected\"\n        sc_stbt.wait_for_motion(consecutive_frames=\"20/500\",\n                                  timeout_secs=300)\n      youtube.Menu().exit(exit_dirty)",
            "functions_used": [
                "totalplay.Menu.to_live()",
                "totalplay.Menu.to_menu()",
                "totalplay.Menu().select()",
                "sc_stbt.press()",
                "totalplay.AppsGrid().select()",
                "sc_stbt.press_and_wait()",
                "sc_stbt.wait_until()",
                "sc_stbt.is_screen_black()",
                "sc_stbt.wait_for_motion()",
                "youtube.Menu().exit()",
                "time.sleep()",
                "sc_stbt.get_config()"
            ],
            "navigation_path": "Live TV → Menu → STREAMING → YouTube → Lecture vidéo 1h → Exit",
            "tags": ["youtube", "stability", "endurance_test", "black_screen_detection", "video_playback"],
            "patterns": ["endurance_testing", "black_screen_detection"],
            "related_tests": ["YT_SCENARIO_005", "YT_SCENARIO_007"],
            "maintenance_notes": "Test d'endurance vidéo avec détection d'écran noir (variante navigation).",
            "last_updated": "2025-05-29"
        },
        {
            "id": "YT_SCENARIO_007",
            "title": "Lecture longue YouTube avec navigation périodique",
            "category": "stability",
            "subcategory": "long_duration",
            "application": "YouTube",
            "platform": "Totalplay",
            "test_type": "endurance",
            "complexity": "medium",
            "estimated_duration": "30 minutes",
            "objective": "Vérifier la stabilité de lecture YouTube avec navigation périodique pendant 30 minutes.",
            "preconditions": "Le système Totalplay est allumé et sur Live TV.",
            "steps": [
                {"step_number": 1, "action": "Aller sur Live TV", "expected_result": "Live TV affiché", "code_equivalent": "totalplay.Menu.to_live()"},
                {"step_number": 2, "action": "Ouvrir le menu principal", "expected_result": "Menu affiché", "code_equivalent": "totalplay.Menu.to_menu()"},
                {"step_number": 3, "action": "Aller dans STREAMING et sélectionner YouTube", "expected_result": "YouTube démarre", "code_equivalent": "totalplay.Menu().select(\"STREAMING\"); sc_stbt.press_and_wait(\"KEY_UP\"); totalplay.AppsGrid().select(\"YOUTUBE\")"},
                {"step_number": 4, "action": "Attendre le chargement de YouTube", "expected_result": "YouTube prêt", "code_equivalent": "time.sleep(10)"},
                {"step_number": 5, "action": "Navigation périodique dans YouTube", "expected_result": "Navigation stable", "code_equivalent": "sc_stbt.press_and_wait(\"KEY_UP\"); time.sleep(1800)"}
            ],
            "code_snippet": "import totalplay\nimport sc_stbt\nimport time\n\nif __name__ == '__main__':\n    totalplay.Menu.to_live()\n    totalplay.Menu.to_menu()\n    totalplay.Menu().select(\"STREAMING\")\n    sc_stbt.press_and_wait(\"KEY_UP\")\n    totalplay.AppsGrid().select(\"YOUTUBE\")\n    time.sleep(10)\n    sc_stbt.press_and_wait(\"KEY_UP\")\n    time.sleep(1800)",
            "functions_used": [
                "totalplay.Menu.to_live()",
                "totalplay.Menu.to_menu()",
                "totalplay.Menu().select()",
                "sc_stbt.press_and_wait()",
                "totalplay.AppsGrid().select()",
                "time.sleep()"
            ],
            "navigation_path": "Live TV → Menu → STREAMING → YouTube → Navigation périodique",
            "tags": ["youtube", "stability", "endurance_test", "navigation", "long_duration"],
            "patterns": ["endurance_testing", "navigation_periodique"],
            "related_tests": ["YT_SCENARIO_006"],
            "maintenance_notes": "Test de stabilité avec navigation périodique sur YouTube.",
            "last_updated": "2025-05-29"
        }
    ]
}
